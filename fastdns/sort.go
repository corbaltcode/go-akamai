// Code generated by gen.go. DO NOT EDIT
package fastdns

import (
	"bytes"
	"encoding/json"
)

func (rl ARecordList) Len() int      { return len(rl) }
func (rl ARecordList) Swap(i, j int) { rl[i], rl[j] = rl[j], rl[i] }
func (rl ARecordList) Less(i, j int) bool {
	if rl[i].Name != rl[j].Name {
		return rl[i].Name < rl[j].Name
	}
	// Backup method: use JSON encoding
	mi, err := json.Marshal(rl[i])
	if err != nil {
		panic(err)
	}
	mj, err := json.Marshal(rl[j])
	if err != nil {
		panic(err)
	}
	return bytes.Compare(mi, mj) <= 0
}

func (rl AAAARecordList) Len() int      { return len(rl) }
func (rl AAAARecordList) Swap(i, j int) { rl[i], rl[j] = rl[j], rl[i] }
func (rl AAAARecordList) Less(i, j int) bool {
	if rl[i].Name != rl[j].Name {
		return rl[i].Name < rl[j].Name
	}
	// Backup method: use JSON encoding
	mi, err := json.Marshal(rl[i])
	if err != nil {
		panic(err)
	}
	mj, err := json.Marshal(rl[j])
	if err != nil {
		panic(err)
	}
	return bytes.Compare(mi, mj) <= 0
}

func (rl AFSDBRecordList) Len() int      { return len(rl) }
func (rl AFSDBRecordList) Swap(i, j int) { rl[i], rl[j] = rl[j], rl[i] }
func (rl AFSDBRecordList) Less(i, j int) bool {
	if rl[i].Name != rl[j].Name {
		return rl[i].Name < rl[j].Name
	}
	// Backup method: use JSON encoding
	mi, err := json.Marshal(rl[i])
	if err != nil {
		panic(err)
	}
	mj, err := json.Marshal(rl[j])
	if err != nil {
		panic(err)
	}
	return bytes.Compare(mi, mj) <= 0
}

func (rl CNAMERecordList) Len() int      { return len(rl) }
func (rl CNAMERecordList) Swap(i, j int) { rl[i], rl[j] = rl[j], rl[i] }
func (rl CNAMERecordList) Less(i, j int) bool {
	if rl[i].Name != rl[j].Name {
		return rl[i].Name < rl[j].Name
	}
	// Backup method: use JSON encoding
	mi, err := json.Marshal(rl[i])
	if err != nil {
		panic(err)
	}
	mj, err := json.Marshal(rl[j])
	if err != nil {
		panic(err)
	}
	return bytes.Compare(mi, mj) <= 0
}

func (rl DNSKEYRecordList) Len() int      { return len(rl) }
func (rl DNSKEYRecordList) Swap(i, j int) { rl[i], rl[j] = rl[j], rl[i] }
func (rl DNSKEYRecordList) Less(i, j int) bool {
	if rl[i].Name != rl[j].Name {
		return rl[i].Name < rl[j].Name
	}
	// Backup method: use JSON encoding
	mi, err := json.Marshal(rl[i])
	if err != nil {
		panic(err)
	}
	mj, err := json.Marshal(rl[j])
	if err != nil {
		panic(err)
	}
	return bytes.Compare(mi, mj) <= 0
}

func (rl DSRecordList) Len() int      { return len(rl) }
func (rl DSRecordList) Swap(i, j int) { rl[i], rl[j] = rl[j], rl[i] }
func (rl DSRecordList) Less(i, j int) bool {
	if rl[i].Name != rl[j].Name {
		return rl[i].Name < rl[j].Name
	}
	// Backup method: use JSON encoding
	mi, err := json.Marshal(rl[i])
	if err != nil {
		panic(err)
	}
	mj, err := json.Marshal(rl[j])
	if err != nil {
		panic(err)
	}
	return bytes.Compare(mi, mj) <= 0
}

func (rl HINFORecordList) Len() int      { return len(rl) }
func (rl HINFORecordList) Swap(i, j int) { rl[i], rl[j] = rl[j], rl[i] }
func (rl HINFORecordList) Less(i, j int) bool {
	if rl[i].Name != rl[j].Name {
		return rl[i].Name < rl[j].Name
	}
	// Backup method: use JSON encoding
	mi, err := json.Marshal(rl[i])
	if err != nil {
		panic(err)
	}
	mj, err := json.Marshal(rl[j])
	if err != nil {
		panic(err)
	}
	return bytes.Compare(mi, mj) <= 0
}

func (rl LOCRecordList) Len() int      { return len(rl) }
func (rl LOCRecordList) Swap(i, j int) { rl[i], rl[j] = rl[j], rl[i] }
func (rl LOCRecordList) Less(i, j int) bool {
	if rl[i].Name != rl[j].Name {
		return rl[i].Name < rl[j].Name
	}
	// Backup method: use JSON encoding
	mi, err := json.Marshal(rl[i])
	if err != nil {
		panic(err)
	}
	mj, err := json.Marshal(rl[j])
	if err != nil {
		panic(err)
	}
	return bytes.Compare(mi, mj) <= 0
}

func (rl MXRecordList) Len() int      { return len(rl) }
func (rl MXRecordList) Swap(i, j int) { rl[i], rl[j] = rl[j], rl[i] }
func (rl MXRecordList) Less(i, j int) bool {
	if rl[i].Name != rl[j].Name {
		return rl[i].Name < rl[j].Name
	}
	// Backup method: use JSON encoding
	mi, err := json.Marshal(rl[i])
	if err != nil {
		panic(err)
	}
	mj, err := json.Marshal(rl[j])
	if err != nil {
		panic(err)
	}
	return bytes.Compare(mi, mj) <= 0
}

func (rl NAPTRRecordList) Len() int      { return len(rl) }
func (rl NAPTRRecordList) Swap(i, j int) { rl[i], rl[j] = rl[j], rl[i] }
func (rl NAPTRRecordList) Less(i, j int) bool {
	if rl[i].Name != rl[j].Name {
		return rl[i].Name < rl[j].Name
	}
	// Backup method: use JSON encoding
	mi, err := json.Marshal(rl[i])
	if err != nil {
		panic(err)
	}
	mj, err := json.Marshal(rl[j])
	if err != nil {
		panic(err)
	}
	return bytes.Compare(mi, mj) <= 0
}

func (rl NSRecordList) Len() int      { return len(rl) }
func (rl NSRecordList) Swap(i, j int) { rl[i], rl[j] = rl[j], rl[i] }
func (rl NSRecordList) Less(i, j int) bool {
	if rl[i].Name != rl[j].Name {
		return rl[i].Name < rl[j].Name
	}
	// Backup method: use JSON encoding
	mi, err := json.Marshal(rl[i])
	if err != nil {
		panic(err)
	}
	mj, err := json.Marshal(rl[j])
	if err != nil {
		panic(err)
	}
	return bytes.Compare(mi, mj) <= 0
}

func (rl NSEC3RecordList) Len() int      { return len(rl) }
func (rl NSEC3RecordList) Swap(i, j int) { rl[i], rl[j] = rl[j], rl[i] }
func (rl NSEC3RecordList) Less(i, j int) bool {
	if rl[i].Name != rl[j].Name {
		return rl[i].Name < rl[j].Name
	}
	// Backup method: use JSON encoding
	mi, err := json.Marshal(rl[i])
	if err != nil {
		panic(err)
	}
	mj, err := json.Marshal(rl[j])
	if err != nil {
		panic(err)
	}
	return bytes.Compare(mi, mj) <= 0
}

func (rl NSEC3PARAMRecordList) Len() int      { return len(rl) }
func (rl NSEC3PARAMRecordList) Swap(i, j int) { rl[i], rl[j] = rl[j], rl[i] }
func (rl NSEC3PARAMRecordList) Less(i, j int) bool {
	if rl[i].Name != rl[j].Name {
		return rl[i].Name < rl[j].Name
	}
	// Backup method: use JSON encoding
	mi, err := json.Marshal(rl[i])
	if err != nil {
		panic(err)
	}
	mj, err := json.Marshal(rl[j])
	if err != nil {
		panic(err)
	}
	return bytes.Compare(mi, mj) <= 0
}

func (rl PTRRecordList) Len() int      { return len(rl) }
func (rl PTRRecordList) Swap(i, j int) { rl[i], rl[j] = rl[j], rl[i] }
func (rl PTRRecordList) Less(i, j int) bool {
	if rl[i].Name != rl[j].Name {
		return rl[i].Name < rl[j].Name
	}
	// Backup method: use JSON encoding
	mi, err := json.Marshal(rl[i])
	if err != nil {
		panic(err)
	}
	mj, err := json.Marshal(rl[j])
	if err != nil {
		panic(err)
	}
	return bytes.Compare(mi, mj) <= 0
}

func (rl RPRecordList) Len() int      { return len(rl) }
func (rl RPRecordList) Swap(i, j int) { rl[i], rl[j] = rl[j], rl[i] }
func (rl RPRecordList) Less(i, j int) bool {
	if rl[i].Name != rl[j].Name {
		return rl[i].Name < rl[j].Name
	}
	// Backup method: use JSON encoding
	mi, err := json.Marshal(rl[i])
	if err != nil {
		panic(err)
	}
	mj, err := json.Marshal(rl[j])
	if err != nil {
		panic(err)
	}
	return bytes.Compare(mi, mj) <= 0
}

func (rl RRRecordList) Len() int      { return len(rl) }
func (rl RRRecordList) Swap(i, j int) { rl[i], rl[j] = rl[j], rl[i] }
func (rl RRRecordList) Less(i, j int) bool {
	if rl[i].Name != rl[j].Name {
		return rl[i].Name < rl[j].Name
	}
	// Backup method: use JSON encoding
	mi, err := json.Marshal(rl[i])
	if err != nil {
		panic(err)
	}
	mj, err := json.Marshal(rl[j])
	if err != nil {
		panic(err)
	}
	return bytes.Compare(mi, mj) <= 0
}

func (rl RRSIGRecordList) Len() int      { return len(rl) }
func (rl RRSIGRecordList) Swap(i, j int) { rl[i], rl[j] = rl[j], rl[i] }
func (rl RRSIGRecordList) Less(i, j int) bool {
	if rl[i].Name != rl[j].Name {
		return rl[i].Name < rl[j].Name
	}
	// Backup method: use JSON encoding
	mi, err := json.Marshal(rl[i])
	if err != nil {
		panic(err)
	}
	mj, err := json.Marshal(rl[j])
	if err != nil {
		panic(err)
	}
	return bytes.Compare(mi, mj) <= 0
}

func (rl SPFRecordList) Len() int      { return len(rl) }
func (rl SPFRecordList) Swap(i, j int) { rl[i], rl[j] = rl[j], rl[i] }
func (rl SPFRecordList) Less(i, j int) bool {
	if rl[i].Name != rl[j].Name {
		return rl[i].Name < rl[j].Name
	}
	// Backup method: use JSON encoding
	mi, err := json.Marshal(rl[i])
	if err != nil {
		panic(err)
	}
	mj, err := json.Marshal(rl[j])
	if err != nil {
		panic(err)
	}
	return bytes.Compare(mi, mj) <= 0
}

func (rl SRVRecordList) Len() int      { return len(rl) }
func (rl SRVRecordList) Swap(i, j int) { rl[i], rl[j] = rl[j], rl[i] }
func (rl SRVRecordList) Less(i, j int) bool {
	if rl[i].Name != rl[j].Name {
		return rl[i].Name < rl[j].Name
	}
	// Backup method: use JSON encoding
	mi, err := json.Marshal(rl[i])
	if err != nil {
		panic(err)
	}
	mj, err := json.Marshal(rl[j])
	if err != nil {
		panic(err)
	}
	return bytes.Compare(mi, mj) <= 0
}

func (rl SSHFPRecordList) Len() int      { return len(rl) }
func (rl SSHFPRecordList) Swap(i, j int) { rl[i], rl[j] = rl[j], rl[i] }
func (rl SSHFPRecordList) Less(i, j int) bool {
	if rl[i].Name != rl[j].Name {
		return rl[i].Name < rl[j].Name
	}
	// Backup method: use JSON encoding
	mi, err := json.Marshal(rl[i])
	if err != nil {
		panic(err)
	}
	mj, err := json.Marshal(rl[j])
	if err != nil {
		panic(err)
	}
	return bytes.Compare(mi, mj) <= 0
}

func (rl TXTRecordList) Len() int      { return len(rl) }
func (rl TXTRecordList) Swap(i, j int) { rl[i], rl[j] = rl[j], rl[i] }
func (rl TXTRecordList) Less(i, j int) bool {
	if rl[i].Name != rl[j].Name {
		return rl[i].Name < rl[j].Name
	}
	// Backup method: use JSON encoding
	mi, err := json.Marshal(rl[i])
	if err != nil {
		panic(err)
	}
	mj, err := json.Marshal(rl[j])
	if err != nil {
		panic(err)
	}
	return bytes.Compare(mi, mj) <= 0
}
